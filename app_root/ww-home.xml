<?xml version="1.0" encoding="UTF-8" ?>
<messages>
    <message id="template">

        <div id="banner_wrapper">
            <div id="banner_content">
                <div id="banner_end">
                    <div id="banner">
                        <!-- <a href="#">Witty Wizard</a> -->
                    </div>
                </div>
            </div>
        </div>

        <div id="main_wrapper">
            <div id="main_menu">
                ${menu}
            </div>
            <div class="clearall"></div>
        </div>

        <div id="main_content" class="panel">
            <div id="content" class="panel-body">
                ${contents}
            </div>
        </div>

        <div id="footer_wrapper" class="panel">
            <div id="footer_content" class="panel-footer">
                <div id="footer_copyright" style="display: inline;">
                    Witty Wizard Content Management System (CMS)
                    <a href="http://WittyWizard.org/">WittyWizard.org</a>
                </div>

                <div id="footer_menu" style="float: right; display: inline;">
                    <a href="http://beta.WittyWizard.org:8088">Home</a> | <a href="http://beta.WittyWizard.org:8088/contact">Contact</a>
                </div>

                <div id="chat"></div>
                <script src="http://www.webtoolkit.eu/wt/examples/simplechat/chat.js?div=chat" type="text/javascript"></script>

                <div class="clearall"></div>
            </div>
            <script>
            /*<![CDATA[*/
              (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
              (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
              m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
              })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

              ga('create', 'UA-48275805-1', 'wittywizard.org');
              ga('send', 'pageview');

            /* ]]> */
            </script>
        </div>
    </message>

    <message id="wt">Witty Wizard, C++ Web Toolkit Content Managment System (CMS)</message>

    <message id="title">Witty Wizard</message>
    <message id="home">Home</message>
    <message id="blog">Blog</message>
    <message id="chat">Chat</message>
    <message id="video">Video</message>
    <message id="contact">Contact</message>

    <message id="home.intro">

        <h3><span>Witty Wizzard: an introduction</span></h3>

        <p>
            Wt (pronounced as <i>witty</i>) is a C++ library for developing web applications.
        </p>

        <p>
            <b>Witty Wizard</b> is a project to make writing Wt Applications easier, so its not a Typical Content Managment System (CMS),
            but its much easier over all, it gives the end user something to start with and build on.
        </p>

    </message>

    <message id="home.contact">


        <p>
            Contact Form in work.
        </p>


    </message>

    <message id="chatter">

        <h2><span>Witty Wizard Chat client</span></h2>

        <p>This is a multi-user chat client and server.</p>

        <p>
            To keep the example simple, server and clients all run in the same process.
            Still, because all I/O in Wt is asynchronous even when using
            "server push" which requires an open connection with each client at
            all times, clients do not tie up threads, and as such the application
            could easily support thousands of simultaneous users as well.
        </p>

        <p>
            The client is contained in a widget (SimpleChatWidget), and can be
            instantiated as many times as you like, even in the same application.<br />

            Because of the widget abstraction, it is straight forward to include a
            chat client in your own application, by linking both the client and
            server classes into your application.
        </p>
    </message>

    <message id="details">

        <p>
            The implementation uses server-initiated updates, a feature that is
            not much different from regular client-server communication in Wt, and
            allows updating a session from outside its regular event loop. When a
            message is received, the user interface (i.e. widget tree) not only of
            the current session, but also of all other sessions is updated and
            "pushed" to these clients simultaneously.
        </p>

    </message>

    <message id="serverpushwarning">Note, you do not have JavaScript and this chat will have degraded functionality</message>

    <message id="intro">
        <h1>Using WVideo</h1>
        <p>
            Although the <tt>WMediaPlayer</tt> implements a cross-browser video player,
            in some cases, one may want direct access to a native
            HTML <tt>&lt;video&gt;</tt> element. This is provided by
            the <tt>WVideo</tt> widget.
        </p>

        <p>
            The trailer used in the examples below
            is <a href="http://durian.blender.org/"
            target="_blank">Sintel</a>, (c) copyright Blender Foundation | durian.blender.org
        </p>
    </message>
    <message id="html5">
        <h2>Native video</h2>
        <p>
            Below is the video class, with a <tt>WImage</tt> (a static JPEG
            image) as fallback. The video will play on browsers that support
            MP4 or OGV video streams (firefox, chrome, safari, ...)
            natively (using HTML <tt>&lt;video&gt;</tt>), and show the image on other
            browsers (Internet Explorer, opera, ...).
        </p>
    </message>
    <message id="flash-fallback">
        <h2>Native video with Flash player fall-back</h2>
        <p>
            For browsers that support HTML <tt>&lt;video&gt;</tt>, this
            video below looks exactly like the one above. On other browsers,
            the player below falls back to a Flash player, which plays an
            MP4 video. If flash is not supported on your system, a static image is shown.
        </p>
        <p>
            The Flash-based video player can be any player. The example
            below uses <a href="http://flv-player.net/" target="_blank">FLV
            Player</a> as fallback for HTML5 video, but any flash player can do the job.
        </p>
    </message>

    <message id="mediaplayer">
        <h1>
            Using WMediaPlayer
        </h1>
        <p>
            <tt>
                WMediaPlayer
            </tt>
            provides an interactive audio/video player, with flexible support for user-interface controls, and good cross-browser support through a combination of native HTML elements (
            <tt>
                &lt;video&gt;
            </tt>
                    ,
            <tt>
                &lt;audio&gt;
            </tt>
            ) and flash fall-back.
        </p>
        <p>
            A unique feature of the video player is that regardless of the technology used for video playback, the same
            <tt>
                WWidget
            </tt>
            may be used to implement the controls, using native form elements. In this way, the user-interface is easily customized and adapted to your needs and skinned using CSS.
        </p>
    </message>

</messages>
